# Buổi 3: CSS(Phần 2)

[Buổi 3: CSS(Phần 2)](#buổi-3-cssphần-2)
- [Buổi 3: CSS(Phần 2)](#buổi-3-cssphần-2)
  - [1. Flexbox, Flex attribute: direction, wrap, flow](#1-flexbox-flex-attribute-direction-wrap-flow)
    - [1.1. Flexbox là gì?](#11-flexbox-là-gì)
    - [1.2. Các khái niệm cơ bản và thuật ngữ](#12-các-khái-niệm-cơ-bản-và-thuật-ngữ)
    - [1.3. Các thuộc tính của Flex Container](#13-các-thuộc-tính-của-flex-container)
      - [1.3.1. flex-direction](#131-flex-direction)
      - [1.3.2. flex-wrap](#132-flex-wrap)
      - [1.3.3. flex-flow](#133-flex-flow)
      - [1.3.4. justify-content](#134-justify-content)
      - [1.3.5. align-items](#135-align-items)
  - [2. Grid, GridView](#2-grid-gridview)
  - [3. Z-index, OverFlow, Align, Justify](#3-z-index-overflow-align-justify)
    - [3.1. Z-index](#31-z-index)
    - [3.2. `overflow`: Quy định xử lý nội dung bị tràn](#32-overflow-quy-định-xử-lý-nội-dung-bị-tràn)
    - [3.3. `align` và `justify`: Căn chỉnh phần tử trong Flexbox/Grid](#33-align-và-justify-căn-chỉnh-phần-tử-trong-flexboxgrid)
  - [4. Responsive](#4-responsive)
    - [4.1. Media Queries](#41-media-queries)
  - [5. Nav bar](#5-nav-bar)
    - [5.1. Cấu trúc cơ bản của Nav bar](#51-cấu-trúc-cơ-bản-của-nav-bar)
    - [5.2. CSS đơn giản cho Nav bar ngang](#52-css-đơn-giản-cho-nav-bar-ngang)
    - [5.3 Nav bar Responsive(Menu trên mobile)](#53-nav-bar-responsivemenu-trên-mobile)
    - [5.4. Nav bar cố định trên đầu (Fixed)](#54-nav-bar-cố-định-trên-đầu-fixed)
  - [6. Dropdown](#6-dropdown)
  - [7. Form](#7-form)

## 1. Flexbox, Flex attribute: direction, wrap, flow
### 1.1. Flexbox là gì?
- **Flexbox Layout (còn gọi là Flexible Box hay CSS Flex Box)** là một kiểu bố cục trang có khả năng tự cân đối kích thước, thay đổi chiều rộng/cao và thứ tự phần tử bên trong để phù hợp với tất cả các loại thiết bị hiển thị và kích thước màn hình
- Với bố cục bình thường, bạn cần phải thiết lập kích thước của phần tử, thiết lập hiển thị dạng block hay inline, cho nó float, còn với Flexbox bạn chỉ cần thiết lập phần hiển thị theo chiều ngang hay dọc, lúc đó các phần tử bên trong có thể hiển thị theo ý muốn.
- **Lưu ý**: Flexbox Layout phù hợp nhất để thiết lập bố cục ở quy mô nhỏ, còn thiết lập bố cục với phạm vi lớn hơn thì vẫn nên sử dụng kiểu thông thường là dàn trang theo dạng lưới (grid layout).

### 1.2. Các khái niệm cơ bản và thuật ngữ
- **Bố cục flex**: được thiết lập từ một khung lớn (parent container) đóng vai trò là khung linh hoạt (flex container) và các thẻ con ngay trong nó (immediate children) đóng vai trò các mục nhỏ linh hoạt(flex item)
- Sơ đò cấu trúc Flexbox:
![alt text](image.png)

- Thành phần quan trọng nhất của Flexbox là
    + **container**: là thành phần lớn bao quanh các phần tử bên trong, các item bên trong sẽ hiển thị dựa trên thiết lập của container này.
    + **item**: là phần tử con của container, bạn có thể thiết lập nó sẽ sử dụng bao nhiêu cột trong một container, hoặc thiết lập thứ tự hiển thị của nó.
  + ![alt text](image-1.png)

- Các item sẽ được bố trí theo trục main axis (bắt đầu từ main-start, kết thúc ở main-end) hoặc theo trục cross axis (bắt đầu từ cross-start, kết thúc ở cross-end).
- **main axis**: đây là trục chính để điều khiển hướng mà các item sẽ hiển thị. Lưu ý, main axis không phải lúc nào cũng nằm ngang như sơ đồ trên, bạn có thể sử dụng thuộc tính flex-direction để thay đổi hướng của trục và lúc đó các item sẽ hiển thị theo nó.
- **main-start | main-end**: khi thiết lập flexbox, các item nằm trong container hiển thị từ điểm bắt đầu gọi là main-start tới điểm kết thúc gọi là main-end.
- **main size**: kích thước (chiều rộng hoặc chiều cao) của các item, tùy thuộc vào hướng của main axis.
- **cross axis**: cross axis luôn là trục vuông góc của main axis. Hướng của nó phụ thuộc vào hướng của main axis.
- **cross-start | cross-end**: có ý nghĩa tương tự nhưng luôn vuông góc với main start, main end.
- **cross size**: kích thước (chiều rộng hoặc chiều cao) của các item dựa trên trục cross axis, tùy thuộc vào hướng của main axis.

### 1.3. Các thuộc tính của Flex Container
- **display**: Để dử dụng flex trong CSS thì đơn giản là chúng ta chỉ cần khai báo thuộc tính  `display: flex`
```html
.container {display: flex; /* hoặc inline-flex */ }
```
- **Lưu ý**: các cột CSS thông thường không sử dụng được trong flex container

#### 1.3.1. flex-direction
- **Thuộc tính flex-direction** xác định hướng của main-axis để container sắp xếp các item
- ![alt text](image-2.png)
- ![alt text](image-3.png)
- **Cú pháp:**
```html
.container {
    flex-direction: row| row-reverse|column| column-reverse;
}
```
- **Các tham số:**
    + **row**: mặc định, flex item được sắp xếp theo chiều ngang, **từ trái qua phải** (main axis nằm ngang).
    + **row-reverse**: flex item được sắp xếp theo chiều ngang, **từ phải qua trái** (main axis nằm ngang).
    + **column**: flex item được sắp xếp theo chiều dọc, từ **trên xuống dưới** (main axis đứng dọc).
    + **column-reverse**: flex item được sắp xếp theo chiều dọc, **từ dưới lên trên** (main axis đứng dọc).

#### 1.3.2. flex-wrap
- ![alt text](image-4.png)
- Theo mặc định, item sẽ tự động thay đổi kích thước phần tử để nó luôn hiển thị trên cùng một dòng dù bạn có resize trình duyệt theo kích thước nào, điều này dễ làm cho nội dung bên trong (nếu có) bị giãn hay ép nhỏ lại, có thể gây xấu giao diện.
-> Vì vậy, ta có **thuộc tính flex-wrap** cho phép item tự động xuống dòng khi kích thước container thay đổi.
- Cú pháp:
```html
.container {
    flex-wrap: nowrap | wrap | wrap-reverse;
}
```
- Tham số:
  + **nowrap**: mặc định, tất cả các item sẽ nằm trên một dòng.
  + **wrap**: khi kích thước container thay đổi và tổng chiều rộng các item cộng lại lớn hơn chiều rộng của container thì item sẽ tự động xuống dòng.
  + **wrap-reverse**: tương tự như **wrap**, nhưng thay vì xuống dòng thì item sẽ tự động nhảy lên trên.

#### 1.3.3. flex-flow
- **Thuộc tính flex-flow** sử dụng để gộp chung hai thuộc tính flex-direction và flex-wrap.
- **Cú pháp**
```html
flex-flow: <`flex-direction`> || <`flex-wrap`>
```
- Ví dụ:
```html
.flex-container {
  display: flex; flex-flow: row wrap;
}
```

#### 1.3.4. justify-content
- ![alt text](image-5.png)
- ![alt text](image-6.png)
- Theo mặc định, các item bên trong sẽ bắt đầu từ main start đến main end, tuy nhiên, đôi khi container vẫn còn khoảng trống. Vì vậy, bạn có thể sử dụng **thuộc tính justify-content** để điều chỉnh vị trí bắt đầu và căn chỉnh các item bên trong container **theo dọc theo trục main axis**, chiều ngang hoặc chiều dọc tùy thuộc vào flex-direction.
- Cú pháp:
```html
.container {  
  justify-content: flex-start | flex-end | center | space-between |space-around | space-evenly;  
  }
```
- Các tham số:
  + **flex-start**: giá trị mặc định, item sẽ bắt đầu từ lề chính main-start của container.
  + **flex-end**: item sẽ bắt đầu từ lề chính main-end của container (khác với row-reverse là đổi hướng hiển thị).
  + **center**: item sẽ nằm giữa container.
  + **space-between**: các item sẽ có khoảng cách giữa các phần tử bằng nhau do container sẽ tự động căn khoảng cách, item đầu tiên sát lề chứa điểm main-start, item cuối cùng sát lề chứa điểm main-end.
  + **space-around**: tương tự space-between, nhưng khác ở chỗ là mỗi item có khoảng cách 2 bên cạnh và những khoảng cách này bằng nhau.
  + **space-evenly**: các item được phân phối sao cho khoảng cách giữa hai item bất kỳ, giữa item và các lề là bằng nhau.

#### 1.3.5. align-items
- ![alt text](flexbox-27-1.jpg)
- ![alt text](flexbox-28-1.jpg)
- ![alt text](flexbox-28-1-1.jpg)
- ![alt text](flexbox-3-1.jpg)
- **Thuộc tính align-items** sử dụng để điều chỉnh vị trí bắt đầu và căn chỉnh các item bên trong container theo dọc theo trục cross axis, chiều ngang hoặc chiều dọc tùy thuộc vào flex-direction.
- **Cú pháp**
```html
.container {
  align-items: stretch | flex-start | flex-end | center | baseline;
}
```
- **stretch:** giá trị mặc định, các phần tử sẽ được kéo dài để lấp đầy container chứa nó, nhưng sẽ ưu tiên giá trị height/width nếu có, khi đó item sẽ không cao full mà chỉ lấy giá trị height/width mà bạn set.
```html
.flex-container {   display: flex;  align-items: stretch; }
```
![alt text](flexbox-31-1.jpg)

- **flex-start:** item sẽ bắt đầu từ lề **cross-start** của container
- Ví dụ **trường hợp mặc định** với main axis nằm ngang, cross axis đứng dọc, flex-direction: row thì các item sẽ bắt đầu từ trên.
```html
.flex-container {   display: flex;  align-items: flex-start; }
```
![alt text](flexbox-32.jpg)

- **flex-end**: item sẽ bắt đầu từ lề cross-end của container. Trường hợp mặc định với cross axis đứng dọc, flex-direction: row thì các item sẽ dồn xuống dưới.
```html
.flex-container {   display: flex;  align-items: flex-end; }
```
![alt text](flexbox-33.jpg)

- **center**:  item sẽ căn giữa theo chiều của cross axis.
```html
.flex-container {   display: flex;  align-items: center; }
```
![alt text](flexbox-34.jpg)

- **baseline:**  item được căn chỉnh theo đường cơ sở của chúng. Đường cơ sở là đường mà tất cả các chữ cái sẽ “ngồi lên”. Bạn có thể sử dụng kích thước font chữ khác nhau để thấy rằng các mục được căn chỉnh theo đường cơ sở baseline
```html
.flex-container {   display: flex;  align-items: baseline; }
```
![alt text](flexbox-35.jpg)

## 2. Grid, GridView
- Hệ thống Grid Layout của CSS cung cấp một hệ thống bố cục dạng lưới, với cột và hàng mà không còn cần sử dụng đến `float` hay `position`
- **Thuộc tính `display`**:
  + Một layout dạng lưới này phải có một element cha với display được set là `grid` hay `inline-grid`.
  + Khi dùng `display: grid;`, chúng ta sẽ được một container chứa grid dưới dạng block

- Cấu trúc cơ bản:
```html
<div class="grid-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
  <div>4</div>
</div>
```

```css
.grid-container {
  display: grid;
  grid-template-columns: 100px 100px;
  grid-template-rows: 50px 50px;
  gap: 10px;
}
```

-> **Kết quả**: 4 ô được sắp thành 2 cột × 2 hàng, cách nhau 10px.

- **Các thuộc tính thường dùng trong Grid:**

|Thuộc tính|Ý nghĩa|
|---|---|
|`display: grid`|	Khai báo container là Grid|
|`grid-template-columns`|Xác định số và kích thước cột|
|`grid-template-rows`|Xác định số và kích thước hàng|
|`gap` hoặc `row-gap`, `column-gap`|Khoảng cách giữa hàng/cột|
|`grid-column`, `grid-row`|Giúp phần tử con mở rộng nhiều hàng/cột|
|`justify-items`, `align-items`|Căn giữa item theo trục ngang/dọc|

- **Grid View**
```html
<style>
.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 cột có độ rộng bằng nhau */
  gap: 10px;
  background: #eee;
  padding: 10px;
}

.grid-container div {
  background: #4CAF50;
  color: white;
  text-align: center;
  padding: 30px 0;
  font-size: 20px;
}
</style>

<div class="grid-container">
  <div>1</div> <div>2</div> <div>3</div>
  <div>4</div> <div>5</div> <div>6</div>
</div>
```

-> Kết quả
<style>
.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 cột có độ rộng bằng nhau */
  gap: 10px;
  background: #eee;
  padding: 10px;
}

.grid-container div {
  background: #4CAF50;
  color: white;
  text-align: center;
  padding: 30px 0;
  font-size: 20px;
}
</style>

<div class="grid-container">
  <div>1</div> <div>2</div> <div>3</div>
  <div>4</div> <div>5</div> <div>6</div>
</div>

- **Khi nào dùng Grid**

|Trường hợp|Flexbox|Grid|
|---|---|---|
|Layout **1 chiều** (chỉ hàng hoặc cột)|phù hợp|Có thể, nhưng hơi dư|
|Layout **2 chiều** (hàng + cột)|Không thuận tiện|Lý tưởng|
|Căn giữa, căn lề item trong container|Cả 2 đều dùng tốt||
|Layout phức tạp với vùng rõ ràng|Khó kiểm soát| Grid mạnh hơn|

## 3. Z-index, OverFlow, Align, Justify
### 3.1. Z-index
- Dùng để quyết định phần tử nào hiển thị trên phần tử nào khi chúng chồng lên nhau.
- Chỉ hoạt động với phần tử có `position` khác `static` (ví dụ: `relative`, `absolute`, `fixed`, `sticky`).

```html
<style>
.box1 {
  position: absolute;
  top: 0;
  left: 0;
  width: 150px;
  height: 150px;
  background: red;
  z-index: 1;
}

.box2 {
  position: absolute;
  top: 50px;
  left: 50px;
  width: 150px;
  height: 150px;
  background: blue;
  z-index: 2; /* nằm trên box1 */
}
</style>

<div class="box1"></div>
<div class="box2"></div>
```

### 3.2. `overflow`: Quy định xử lý nội dung bị tràn

|Giá trị|Ý nghĩa|
|---|---|
|`visible`|Mặc định – nội dung tràn ra vẫn hiển thị|
|`hidden`|Cắt phần nội dung tràn|
|`scroll`|Luôn hiện thanh cuộn|
|`auto`|Hiện thanh cuộn khi cần thiết|

- Ví dụ:
```html
<style>
.box {
  width: 200px;
  height: 100px;
  overflow: auto;
  background: lightgray;
}
</style>

<div class="box">
  Đây là nội dung rất dài nên sẽ xuất hiện thanh cuộn ngang hoặc dọc nếu cần.
</div>
```

### 3.3. `align` và `justify`: Căn chỉnh phần tử trong Flexbox/Grid
- Đây là 2 nhóm thuộc tính phổ biến khi dùng `display: flex` hoặc `grid`

- `justify-content` (căn trên trục chính, thường là ngang):
  + `flex-start` (trái)
  + `center`
  + `flex-end` (phải)
  + `space-between`
  + `space-around`
  + `space-evenly`

- `align-items`
  + `flex-start` (trên)
  + `center`
  + `flex-end` (dưới)
  + `stretch` (mặc định – giãn ra)

## 4. Responsive
- **Responsive** (hay còn gọi là **Responsive Web Design**) là thiết kế web phản hồi, nghĩa là giao diện trang web tự động điều chỉnh để hiển thị đẹp và dễ sử dụng trên mọi kích thước màn hình – từ máy tính bàn, laptop đến tablet và điện thoại.
- Mục tiêu của responsive:
  + Tránh phải **phóng to – thu nhỏ – cuộn ngang** khi xem web trên điện thoại.
  + Đảm bảo **trải nghiệm người dùng** tốt trên mọi thiết bị.
  
- Ví dụ:
```html
<style>
.container {
  background-color: lightblue;
  padding: 20px;
  font-size: 20px;
}

/* Khi màn hình nhỏ hơn 600px (điện thoại) */
@media screen and (max-width: 600px) {
  .container {
    background-color: lightcoral;
    font-size: 16px;
  }
}
</style>

<div class="container">
  Xin chào! Tôi là thiết kế responsive.
</div>
```

-> Khi bạn thu nhỏ trình duyệt xuống **dưới 600px**, nền sẽ chuyển sang màu đỏ, và chữ nhỏ hơn. Đây chính là **responsive**.

- Ví dụ thực tế: Khi bạn thiết kế một trang web bán hàng:
  + Trên máy tính, hiển thị 4 sản phẩm 1 hàng
  + Trên tablet, hiển thị 2 sản phẩm 1 hàng
  + Trên điện thoại, mỗi hàng chỉ có 1 sản phẩm.
  
### 4.1. Media Queries 
- **Media Queries** là một phần của CSS cho phép bạn áp dụng các kiểu CSS khác nhau tùy theo thiết bị, chẳng hạn như kích thước màn hình, độ phân giải, hoặc hướng màn hình (ngang/dọc).
- Cú pháp cơ bản:
```css
@media screen and (điều_kiện) {
  /* Các thuộc tính CSS */
}
```
- Ví dụ:
```css
/* Mặc định cho máy tính */
body {
  font-size: 20px;
  background-color: lightblue;
}

/* Khi màn hình nhỏ hơn hoặc bằng 600px (điện thoại) */
@media screen and (max-width: 600px) {
  body {
    font-size: 16px;
    background-color: lightcoral;
  }
}
```

- **Một số điều kiện phổ biến**:

|Điều kiện|Ý nghĩa|
|---|---|
|`max-width: 600px`|Khi chiều rộng màn hình **≤ 600px**|
|`min-width: 768px`|Khi chiều rộng màn hình **≥ 768px**|
|`orientation: portrait`|Màn hình ở **chế độ dọc**|
|`orientation: landscape`|Màn hình ở **chế độ ngang**|
|`max-height: 500px`|Khi chiều cao màn hình **≤ 500px**|
|`resolution: 300dpi`|Dành cho màn hình **độ phân giải cao** (in ấn)|

- **Ứng dụng Responsive Layout với Media Queries**:
```css
/* Desktop: 3 cột */
.grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

/* Tablet: 2 cột */
@media (max-width: 992px) {
  .grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Mobile: 1 cột */
@media (max-width: 600px) {
  .grid {
    grid-template-columns: 1fr;
  }
}
```

##  5. Nav bar
- **Nav bar** (Navigation bar) là thanh điều hướng trên website, thường chứa các liên kết đến các trang chính như **Home, About, Contact....** Nav bar có thể đặt ở trên cùng (header), bên cạnh (sidebar) hoặc dưới cùng của trang.

### 5.1. Cấu trúc cơ bản của Nav bar
```html
<nav class="navbar">
  <ul>
    <li><a href="#">Home</a></li>
    <li><a href="#">About</a></li>
    <li><a href="#">Services</a></li>
    <li><a href="#">Contact</a></li>
  </ul>
</nav>
```

### 5.2. CSS đơn giản cho Nav bar ngang
```css
.navbar {
  background-color: #333;
  padding: 10px;
}

.navbar ul {
  list-style: none;         /* bỏ dấu chấm */
  margin: 0;
  padding: 0;
  display: flex;            /* xếp ngang các mục */
  justify-content: center;  /* căn giữa menu */
}

.navbar li {
  margin: 0 15px;
}

.navbar a {
  color: white;
  text-decoration: none;
  font-size: 18px;
}

.navbar a:hover {
  color: #ff9800;           /* đổi màu khi hover */
}
```

### 5.3 Nav bar Responsive(Menu trên mobile)
- Dùng **media queries** để biến nav bar thành dạng **menu** dọc trên điện thoại:

```css
@media (max-width: 600px) {
  .navbar ul {
    flex-direction: column;   /* đổi từ hàng ngang sang dọc */
    align-items: center;
  }
  .navbar li {
    margin: 10px 0;
  }
}
```

### 5.4. Nav bar cố định trên đầu (Fixed)

```css
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}
```

## 6. Dropdown 
- **Dropdowns** (menu xổ xuống) thường dùng trong navbar để hiển thị các mục con, ví dụ như danh sách sản phẩm, tài khoản người dùng

```html
<!DOCTYPE html> 
<html> 
    <head> 
        <style> 
           /* Container của dropdown */
          .dropdown {
            position: relative;
            display: inline-block;
          }

          /* Nút bấm dropdown */
          .dropbtn {
            background-color: #3498db;
            color: white;
            padding: 10px 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
          }

          /* Nội dung dropdown (ẩn mặc định) */
          .dropdown-content {
            display: none;
            position: absolute;
            background-color: white;
            min-width: 160px;
            box-shadow: 0px 4px 8px rgba(0,0,0,0.2);
            z-index: 1;
          }

          /* Các liên kết trong dropdown */
          .dropdown-content a {
            color: black;
            padding: 10px 16px;
            text-decoration: none;
            display: block;
          }

          /* Hiệu ứng hover */
          .dropdown-content a:hover {
            background-color: #f1f1f1;
          }

          /* Khi hover vào .dropdown thì hiển thị dropdown-content */
          .dropdown:hover .dropdown-content {
            display: block;
          }

          /* Optional: đổi màu nút khi hover */
          .dropdown:hover .dropbtn {
            background-color: #2980b9;
          }

        </style> 
    </head> 
    <body> 
      <div class="dropdown">
        <button class="dropbtn">Menu</button>
        <div class="dropdown-content">
          <a href="#">Trang chủ</a>
          <a href="#">Sản phẩm</a>
          <a href="#">Liên hệ</a>
        </div>
      </div>
    </body> 
</html>
```
-> Kết quả:
  + Khi di chuột vào nút "Menu", menu xổ xuống 3 lựa chọn.
  + Không cần JavaScript, hoạt động tốt trên PC.

## 7. Form
- Trong CSS, bạn có thể tùy chỉnh giao diện của form HTML (như ô nhập, nút, nhãn, v.v.) để nó đẹp và nhất quán hơn.- 
- Một số mẹo CSS thường dùng cho form

|Mục tiêu|Thuộc tính CSS|
|---|---|
|Canh form giữa trang|`margin: auto`|
|Bo góc input, button|`border-radius`|
|Tạo khoảng cách giữa các trường|`margin-bottom`, `padding`|
|Hiển thị nhãn bên trên|`label { display: block;}`|
|Đổi màu nền khi nhập|`input:focus { background-color: #e0f0ff;%20}`|

- Tips nâng cao:
  + Sử dụng `flexbox` hoặc `grid` nếu muốn tạo form 2 cột hoặc bố cục phức tạp.
  + Dùng `:focus`, `:hover`, `:valid`, `:invalid` để tạo hiệu ứng động.
  + Có thể thêm media queries để form `responsive` trên điện thoại.